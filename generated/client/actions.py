# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases

if TYPE_CHECKING:
    from .client import Client
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class WaitingRoomActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.WaitingRoom]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = WaitingRoom.prisma().query_raw(
            'SELECT * FROM WaitingRoom WHERE id = ?',
            'bbadfchfja',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.WaitingRoom
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = WaitingRoom.prisma().query_first(
            'SELECT * FROM WaitingRoom WHERE createdAt = ?',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.WaitingRoomCreateInput,
        include: Optional[types.WaitingRoomInclude] = None
    ) -> _PrismaModelT:
        """Create a new WaitingRoom record.

        Parameters
        ----------
        data
            WaitingRoom record data
        include
            Specifies which relations should be loaded on the returned WaitingRoom model

        Returns
        -------
        prisma.models.WaitingRoom
            The created WaitingRoom record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a WaitingRoom record from just the required fields
        waitingroom = WaitingRoom.prisma().create(
            data={
                # data to create a WaitingRoom record
                'opensAt': datetime.datetime.utcnow(),
                'closesAt': datetime.datetime.utcnow(),
                'content': 'dhheabfhf',
                'title': 'ggciceaie',
                'ownerId': 'bbehjachib',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.WaitingRoomCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple WaitingRoom records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of WaitingRoom record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = WaitingRoom.prisma().create_many(
            data=[
                {
                    # data to create a WaitingRoom record
                    'opensAt': datetime.datetime.utcnow(),
                    'closesAt': datetime.datetime.utcnow(),
                    'content': 'cadfabfehe',
                    'title': 'dgiiaaijj',
                    'ownerId': 'bfaiacjjfc',
                },
                {
                    # data to create a WaitingRoom record
                    'opensAt': datetime.datetime.utcnow(),
                    'closesAt': datetime.datetime.utcnow(),
                    'content': 'eigcfgbif',
                    'title': 'bagcfbhiig',
                    'ownerId': 'cghideieh',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.WaitingRoomWhereUniqueInput,
        include: Optional[types.WaitingRoomInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single WaitingRoom record.

        Parameters
        ----------
        where
            WaitingRoom filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned WaitingRoom model

        Returns
        -------
        prisma.models.WaitingRoom
            The deleted WaitingRoom record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        waitingroom = WaitingRoom.prisma().delete(
            where={
                'id': 'biabhbdai',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.WaitingRoomWhereUniqueInput,
        include: Optional[types.WaitingRoomInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique WaitingRoom record.

        Parameters
        ----------
        where
            WaitingRoom filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned WaitingRoom model

        Returns
        -------
        prisma.models.WaitingRoom
            The found WaitingRoom record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        waitingroom = WaitingRoom.prisma().find_unique(
            where={
                'id': 'idghgaicb',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.WaitingRoomWhereInput] = None,
        cursor: Optional[types.WaitingRoomWhereUniqueInput] = None,
        include: Optional[types.WaitingRoomInclude] = None,
        order: Optional[Union[types.WaitingRoomOrderByInput, List[types.WaitingRoomOrderByInput]]] = None,
        distinct: Optional[List[types.WaitingRoomScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple WaitingRoom records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of WaitingRoom records returned
        skip
            Ignore the first N results
        where
            WaitingRoom filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned WaitingRoom model
        order
            Order the returned WaitingRoom records by any field
        distinct
            Filter WaitingRoom records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.WaitingRoom]
            The list of all WaitingRoom records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 WaitingRoom records
        waitingrooms = WaitingRoom.prisma().find_many(take=10)

        # find the first 5 WaitingRoom records ordered by the updatedAt field
        waitingrooms = WaitingRoom.prisma().find_many(
            take=5,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.WaitingRoomWhereInput] = None,
        cursor: Optional[types.WaitingRoomWhereUniqueInput] = None,
        include: Optional[types.WaitingRoomInclude] = None,
        order: Optional[Union[types.WaitingRoomOrderByInput, List[types.WaitingRoomOrderByInput]]] = None,
        distinct: Optional[List[types.WaitingRoomScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single WaitingRoom record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            WaitingRoom filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned WaitingRoom model
        order
            Order the returned WaitingRoom records by any field
        distinct
            Filter WaitingRoom records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.WaitingRoom
            The first WaitingRoom record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second WaitingRoom record ordered by the opensAt field
        waitingroom = WaitingRoom.prisma().find_first(
            skip=1,
            order={
                'opensAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.WaitingRoomUpdateInput,
        where: types.WaitingRoomWhereUniqueInput,
        include: Optional[types.WaitingRoomInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single WaitingRoom record.

        Parameters
        ----------
        data
            WaitingRoom record data specifying what to update
        where
            WaitingRoom filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned WaitingRoom model

        Returns
        -------
        prisma.models.WaitingRoom
            The updated WaitingRoom record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        waitingroom = WaitingRoom.prisma().update(
            where={
                'id': 'fjfddhigg',
            },
            data={
                # data to update the WaitingRoom record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.WaitingRoomWhereUniqueInput,
        data: types.WaitingRoomUpsertInput,
        include: Optional[types.WaitingRoomInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            WaitingRoom filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned WaitingRoom model

        Returns
        -------
        prisma.models.WaitingRoom
            The created or updated WaitingRoom record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        waitingroom = WaitingRoom.prisma().upsert(
            where={
                'id': 'hjaecfifb',
            },
            data={
                'create': {
                    'id': 'hjaecfifb',
                    'opensAt': datetime.datetime.utcnow(),
                    'closesAt': datetime.datetime.utcnow(),
                    'content': 'eigcfgbif',
                    'title': 'bagcfbhiig',
                    'ownerId': 'cghideieh',
                },
                'update': {
                    'opensAt': datetime.datetime.utcnow(),
                    'closesAt': datetime.datetime.utcnow(),
                    'content': 'eigcfgbif',
                    'title': 'bagcfbhiig',
                    'ownerId': 'cghideieh',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.WaitingRoomUpdateManyMutationInput,
        where: types.WaitingRoomWhereInput,
    ) -> int:
        """Update multiple WaitingRoom records

        Parameters
        ----------
        data
            WaitingRoom data to update the selected WaitingRoom records to
        where
            Filter to select the WaitingRoom records to update

        Returns
        -------
        int
            The total number of WaitingRoom records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all WaitingRoom records
        total = WaitingRoom.prisma().update_many(
            data={
                'closesAt': datetime.datetime.utcnow()
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.WaitingRoomWhereInput] = None,
        cursor: Optional[types.WaitingRoomWhereUniqueInput] = None,
    ) -> int:
        """Count the number of WaitingRoom records present in the database

        Parameters
        ----------
        select
            Select the WaitingRoom fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            WaitingRoom filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.WaitingRoomCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = WaitingRoom.prisma().count()

        # results: prisma.types.WaitingRoomCountAggregateOutput
        results = WaitingRoom.prisma().count(
            select={
                '_all': True,
                'content': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.WaitingRoomCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.WaitingRoomWhereInput] = None,
        cursor: Optional[types.WaitingRoomWhereUniqueInput] = None,
    ) -> types.WaitingRoomCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.WaitingRoomCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.WaitingRoomWhereInput] = None,
        cursor: Optional[types.WaitingRoomWhereUniqueInput] = None,
    ) -> Union[int, types.WaitingRoomCountAggregateOutput]:
        """Count the number of WaitingRoom records present in the database

        Parameters
        ----------
        select
            Select the WaitingRoom fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            WaitingRoom filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.WaitingRoomCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = WaitingRoom.prisma().count()

        # results: prisma.types.WaitingRoomCountAggregateOutput
        results = WaitingRoom.prisma().count(
            select={
                '_all': True,
                'title': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.WaitingRoomCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.WaitingRoomWhereInput] = None
    ) -> int:
        """Delete multiple WaitingRoom records.

        Parameters
        ----------
        where
            Optional WaitingRoom filter to find the records to be deleted

        Returns
        -------
        int
            The total number of WaitingRoom records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all WaitingRoom records
        total = WaitingRoom.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.WaitingRoomScalarFieldKeys'],
        *,
        where: Optional['types.WaitingRoomWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.WaitingRoomAvgAggregateInput'] = None,
        sum: Optional['types.WaitingRoomSumAggregateInput'] = None,
        min: Optional['types.WaitingRoomMinAggregateInput'] = None,
        max: Optional['types.WaitingRoomMaxAggregateInput'] = None,
        having: Optional['types.WaitingRoomScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.WaitingRoomCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.WaitingRoomScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.WaitingRoomScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.WaitingRoomGroupByOutput']:
        """Group WaitingRoom records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar WaitingRoom fields to group records by
        where
            WaitingRoom filter to select records
        take
            Limit the maximum number of WaitingRoom records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.WaitingRoomGroupByOutput]
            A list of dictionaries representing the WaitingRoom record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group WaitingRoom records by ownerId values
        # and count how many records are in each group
        results = WaitingRoom.prisma().group_by(
            ['ownerId'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = User.prisma().query_raw(
            'SELECT * FROM User WHERE id = ?',
            'cbbbjbfcii',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = User.prisma().query_first(
            'SELECT * FROM User WHERE createdAt = ?',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = User.prisma().create(
            data={
                # data to create a User record
                'firebaseUid': 'bbejhfidcb',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'firebaseUid': 'bgeecijdgg',
                },
                {
                    # data to create a User record
                    'firebaseUid': 'bdiicjafbj',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().delete(
            where={
                'id': 'bgehebiafc',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().find_unique(
            where={
                'id': 'bghffegacj',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the updatedAt field
        users = User.prisma().find_many(
            take=5,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the firebaseUid field
        user = User.prisma().find_first(
            skip=1,
            order={
                'firebaseUid': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = User.prisma().update(
            where={
                'id': 'bhghchehcc',
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = User.prisma().upsert(
            where={
                'id': 'dcgchcbbf',
            },
            data={
                'create': {
                    'id': 'dcgchcbbf',
                    'firebaseUid': 'bdiicjafbj',
                },
                'update': {
                    'firebaseUid': 'bdiicjafbj',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = User.prisma().update_many(
            data={
                'id': 'bdedcabahc'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = User.prisma().count(
            select={
                '_all': True,
                'createdAt': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = User.prisma().count(
            select={
                '_all': True,
                'updatedAt': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = User.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by firebaseUid values
        # and count how many records are in each group
        results = User.prisma().group_by(
            ['firebaseUid'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class RegistrantActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: 'Client', model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Registrant]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = Registrant.prisma().query_raw(
            'SELECT * FROM Registrant WHERE id = ?',
            'ghfhiafcb',
        )
        ```
        """
        return self._client.query_raw(query, *args, model=self._model)

    def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Registrant
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = Registrant.prisma().query_first(
            'SELECT * FROM Registrant WHERE createdAt = ?',
            datetime.datetime.utcnow(),
        )
        ```
        """
        return self._client.query_first(query, *args, model=self._model)

    def create(
        self,
        data: types.RegistrantCreateInput,
        include: Optional[types.RegistrantInclude] = None
    ) -> _PrismaModelT:
        """Create a new Registrant record.

        Parameters
        ----------
        data
            Registrant record data
        include
            Specifies which relations should be loaded on the returned Registrant model

        Returns
        -------
        prisma.models.Registrant
            The created Registrant record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Registrant record from just the required fields
        registrant = Registrant.prisma().create(
            data={
                # data to create a Registrant record
                'legalName': 'heejgedji',
                'email': 'bjgjgibgbf',
                'idNumber': 'bbbgbhfjge',
                'idType': enums.IdType.ID_CARD,
                'phoneNumber': 'igbehcbab',
                'waitingRoomId': 'bdadaadhag',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='createOne',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def create_many(
        self,
        data: List[types.RegistrantCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Registrant records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Registrant record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = Registrant.prisma().create_many(
            data=[
                {
                    # data to create a Registrant record
                    'legalName': 'bgiggdidbf',
                    'email': 'caaaedabfc',
                    'idNumber': 'bigibebcib',
                    'idType': enums.IdType.ID_CARD,
                    'phoneNumber': 'bigaiehgcc',
                    'waitingRoomId': 'beeifcbebf',
                },
                {
                    # data to create a Registrant record
                    'legalName': 'bgcigfahea',
                    'email': 'bcejgaggif',
                    'idNumber': 'idfjadbcc',
                    'idType': enums.IdType.ID_CARD,
                    'phoneNumber': 'hgdhbjhhj',
                    'waitingRoomId': 'ecjjjfbae',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = self._client._execute(
            operation='mutation',
            method='createMany',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    def delete(
        self,
        where: types.RegistrantWhereUniqueInput,
        include: Optional[types.RegistrantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Registrant record.

        Parameters
        ----------
        where
            Registrant filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Registrant model

        Returns
        -------
        prisma.models.Registrant
            The deleted Registrant record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        registrant = Registrant.prisma().delete(
            where={
                'id': 'bhhfibbigf',
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='deleteOne',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def find_unique(
        self,
        where: types.RegistrantWhereUniqueInput,
        include: Optional[types.RegistrantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Registrant record.

        Parameters
        ----------
        where
            Registrant filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Registrant model

        Returns
        -------
        prisma.models.Registrant
            The found Registrant record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        registrant = Registrant.prisma().find_unique(
            where={
                'id': 'ijdbeffgg',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findUnique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RegistrantWhereInput] = None,
        cursor: Optional[types.RegistrantWhereUniqueInput] = None,
        include: Optional[types.RegistrantInclude] = None,
        order: Optional[Union[types.RegistrantOrderByInput, List[types.RegistrantOrderByInput]]] = None,
        distinct: Optional[List[types.RegistrantScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Registrant records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Registrant records returned
        skip
            Ignore the first N results
        where
            Registrant filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Registrant model
        order
            Order the returned Registrant records by any field
        distinct
            Filter Registrant records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Registrant]
            The list of all Registrant records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Registrant records
        registrants = Registrant.prisma().find_many(take=10)

        # find the first 5 Registrant records ordered by the updatedAt field
        registrants = Registrant.prisma().find_many(
            take=5,
            order={
                'updatedAt': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findMany',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [self._model.parse_obj(r) for r in resp['data']['result']]

    def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.RegistrantWhereInput] = None,
        cursor: Optional[types.RegistrantWhereUniqueInput] = None,
        include: Optional[types.RegistrantInclude] = None,
        order: Optional[Union[types.RegistrantOrderByInput, List[types.RegistrantOrderByInput]]] = None,
        distinct: Optional[List[types.RegistrantScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Registrant record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Registrant filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Registrant model
        order
            Order the returned Registrant records by any field
        distinct
            Filter Registrant records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Registrant
            The first Registrant record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Registrant record ordered by the legalName field
        registrant = Registrant.prisma().find_first(
            skip=1,
            order={
                'legalName': 'desc',
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='query',
            method='findFirst',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return self._model.parse_obj(result)

    def update(
        self,
        data: types.RegistrantUpdateInput,
        where: types.RegistrantWhereUniqueInput,
        include: Optional[types.RegistrantInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Registrant record.

        Parameters
        ----------
        data
            Registrant record data specifying what to update
        where
            Registrant filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Registrant model

        Returns
        -------
        prisma.models.Registrant
            The updated Registrant record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        registrant = Registrant.prisma().update(
            where={
                'id': 'jjfeafhfj',
            },
            data={
                # data to update the Registrant record to
            },
        )
        ```
        """
        try:
            resp = self._client._execute(
                operation='mutation',
                method='updateOne',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return self._model.parse_obj(resp['data']['result'])

    def upsert(
        self,
        where: types.RegistrantWhereUniqueInput,
        data: types.RegistrantUpsertInput,
        include: Optional[types.RegistrantInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Registrant filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Registrant model

        Returns
        -------
        prisma.models.Registrant
            The created or updated Registrant record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        registrant = Registrant.prisma().upsert(
            where={
                'id': 'cbachdgfce',
            },
            data={
                'create': {
                    'id': 'cbachdgfce',
                    'legalName': 'bgcigfahea',
                    'email': 'bcejgaggif',
                    'idNumber': 'idfjadbcc',
                    'idType': enums.IdType.ID_CARD,
                    'phoneNumber': 'hgdhbjhhj',
                    'waitingRoomId': 'ecjjjfbae',
                },
                'update': {
                    'legalName': 'bgcigfahea',
                    'email': 'bcejgaggif',
                    'idNumber': 'idfjadbcc',
                    'idType': enums.IdType.ID_CARD,
                    'phoneNumber': 'hgdhbjhhj',
                    'waitingRoomId': 'ecjjjfbae',
                },
            },
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='upsertOne',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return self._model.parse_obj(resp['data']['result'])

    def update_many(
        self,
        data: types.RegistrantUpdateManyMutationInput,
        where: types.RegistrantWhereInput,
    ) -> int:
        """Update multiple Registrant records

        Parameters
        ----------
        data
            Registrant data to update the selected Registrant records to
        where
            Filter to select the Registrant records to update

        Returns
        -------
        int
            The total number of Registrant records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Registrant records
        total = Registrant.prisma().update_many(
            data={
                'email': 'chbfcacbd'
            },
            where={}
        )
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='updateMany',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RegistrantWhereInput] = None,
        cursor: Optional[types.RegistrantWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Registrant records present in the database

        Parameters
        ----------
        select
            Select the Registrant fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Registrant filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RegistrantCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Registrant.prisma().count()

        # results: prisma.types.RegistrantCountAggregateOutput
        results = Registrant.prisma().count(
            select={
                '_all': True,
                'idNumber': True,
            },
        )
        ```
        """


    @overload
    def count(
        self,
        select: types.RegistrantCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RegistrantWhereInput] = None,
        cursor: Optional[types.RegistrantWhereUniqueInput] = None,
    ) -> types.RegistrantCountAggregateOutput:
        ...

    def count(
        self,
        select: Optional[types.RegistrantCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.RegistrantWhereInput] = None,
        cursor: Optional[types.RegistrantWhereUniqueInput] = None,
    ) -> Union[int, types.RegistrantCountAggregateOutput]:
        """Count the number of Registrant records present in the database

        Parameters
        ----------
        select
            Select the Registrant fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Registrant filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.RegistrantCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = Registrant.prisma().count()

        # results: prisma.types.RegistrantCountAggregateOutput
        results = Registrant.prisma().count(
            select={
                '_all': True,
                'idType': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = self._client._execute(
            operation='query',
            method='aggregate',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.RegistrantCountAggregateOutput, resp['data']['result']['_count'])

    def delete_many(
        self,
        where: Optional[types.RegistrantWhereInput] = None
    ) -> int:
        """Delete multiple Registrant records.

        Parameters
        ----------
        where
            Optional Registrant filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Registrant records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Registrant records
        total = Registrant.prisma().delete_many()
        ```
        """
        resp = self._client._execute(
            operation='mutation',
            method='deleteMany',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    def group_by(
        self,
        by: List['types.RegistrantScalarFieldKeys'],
        *,
        where: Optional['types.RegistrantWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.RegistrantAvgAggregateInput'] = None,
        sum: Optional['types.RegistrantSumAggregateInput'] = None,
        min: Optional['types.RegistrantMinAggregateInput'] = None,
        max: Optional['types.RegistrantMaxAggregateInput'] = None,
        having: Optional['types.RegistrantScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.RegistrantCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.RegistrantScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.RegistrantScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.RegistrantGroupByOutput']:
        """Group Registrant records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Registrant fields to group records by
        where
            Registrant filter to select records
        take
            Limit the maximum number of Registrant records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.RegistrantGroupByOutput]
            A list of dictionaries representing the Registrant record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Registrant records by phoneNumber values
        # and count how many records are in each group
        results = Registrant.prisma().group_by(
            ['phoneNumber'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = self._client._execute(
            operation='query',
            method='groupBy',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models
