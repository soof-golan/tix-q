# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = Literal['default', 'insensitive']
SortOrder = Literal['asc', 'desc']


class _DatasourceOverrideOptional(TypedDict, total=False):
    env: str
    name: str


class DatasourceOverride(_DatasourceOverrideOptional):
    url: str


# NOTE: we don't support some options as their type hints are not publicly exposed
# https://github.com/encode/httpx/discussions/1977
class HttpConfig(TypedDict, total=False):
    app: Callable[[Mapping[str, Any], Any], Any]
    http1: bool
    http2: bool
    limits: httpx.Limits
    timeout: Union[None, float, httpx.Timeout]
    trust_env: bool
    max_redirects: int


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]




StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']




BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]




DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]




BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]




IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]




BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]




FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']




JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]




DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
]

class _IdTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.IdType']]


class _IdTypeListFilterHasInput(TypedDict):
    has: 'enums.IdType'


class _IdTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.IdType']


class _IdTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.IdType']


class _IdTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IdTypeListFilter = Union[
    _IdTypeListFilterHasInput,
    _IdTypeListFilterEqualsInput,
    _IdTypeListFilterHasSomeInput,
    _IdTypeListFilterIsEmptyInput,
    _IdTypeListFilterHasEveryInput,
]


class _IdTypeListUpdateSet(TypedDict):
    set: List['enums.IdType']




IdTypeListUpdate = Union[
    List['enums.IdType'],
    _IdTypeListUpdateSet,
]


# WaitingRoom types

class WaitingRoomOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the WaitingRoom create method"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    registrants: 'RegistrantCreateManyNestedWithoutRelationsInput'
    owner: 'UserCreateNestedWithoutRelationsInput'
    ownerId: _str


class WaitingRoomCreateInput(WaitingRoomOptionalCreateInput):
    """Required arguments to the WaitingRoom create method"""
    opensAt: datetime.datetime
    closesAt: datetime.datetime
    content: _str
    title: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class WaitingRoomOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the WaitingRoom create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    ownerId: _str


class WaitingRoomCreateWithoutRelationsInput(WaitingRoomOptionalCreateWithoutRelationsInput):
    """Required arguments to the WaitingRoom create method, without relations"""
    opensAt: datetime.datetime
    closesAt: datetime.datetime
    content: _str
    title: _str


class WaitingRoomCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'WaitingRoomCreateWithoutRelationsInput'
    connect: 'WaitingRoomWhereUniqueInput'


class WaitingRoomCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['WaitingRoomCreateWithoutRelationsInput', List['WaitingRoomCreateWithoutRelationsInput']]
    connect: Union['WaitingRoomWhereUniqueInput', List['WaitingRoomWhereUniqueInput']]


_WaitingRoomWhereUnique_id_Input = TypedDict(
    '_WaitingRoomWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

WaitingRoomWhereUniqueInput = _WaitingRoomWhereUnique_id_Input


class WaitingRoomUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    opensAt: datetime.datetime
    closesAt: datetime.datetime
    content: _str
    title: _str
    registrants: 'RegistrantUpdateManyWithoutRelationsInput'
    owner: 'UserUpdateOneWithoutRelationsInput'


class WaitingRoomUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    opensAt: datetime.datetime
    closesAt: datetime.datetime
    content: _str
    title: _str


class WaitingRoomUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['WaitingRoomCreateWithoutRelationsInput']
    connect: List['WaitingRoomWhereUniqueInput']
    set: List['WaitingRoomWhereUniqueInput']
    disconnect: List['WaitingRoomWhereUniqueInput']
    delete: List['WaitingRoomWhereUniqueInput']

    # TODO
    # update: List['WaitingRoomUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['WaitingRoomUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['WaitingRoomScalarWhereInput']
    # upsert: List['WaitingRoomUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['WaitingRoomCreateOrConnectWithoutRelationsInput']


class WaitingRoomUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'WaitingRoomCreateWithoutRelationsInput'
    connect: 'WaitingRoomWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'WaitingRoomUpdateInput'
    # upsert: 'WaitingRoomUpsertWithoutRelationsInput'
    # connectOrCreate: 'WaitingRoomCreateOrConnectWithoutRelationsInput'


class WaitingRoomUpsertInput(TypedDict):
    create: 'WaitingRoomCreateInput'
    update: 'WaitingRoomUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_WaitingRoom_id_OrderByInput = TypedDict(
    '_WaitingRoom_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_WaitingRoom_createdAt_OrderByInput = TypedDict(
    '_WaitingRoom_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_WaitingRoom_updatedAt_OrderByInput = TypedDict(
    '_WaitingRoom_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_WaitingRoom_opensAt_OrderByInput = TypedDict(
    '_WaitingRoom_opensAt_OrderByInput',
    {
        'opensAt': 'SortOrder',
    },
    total=True
)

_WaitingRoom_closesAt_OrderByInput = TypedDict(
    '_WaitingRoom_closesAt_OrderByInput',
    {
        'closesAt': 'SortOrder',
    },
    total=True
)

_WaitingRoom_content_OrderByInput = TypedDict(
    '_WaitingRoom_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_WaitingRoom_title_OrderByInput = TypedDict(
    '_WaitingRoom_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_WaitingRoom_ownerId_OrderByInput = TypedDict(
    '_WaitingRoom_ownerId_OrderByInput',
    {
        'ownerId': 'SortOrder',
    },
    total=True
)

WaitingRoomOrderByInput = Union[
    '_WaitingRoom_id_OrderByInput',
    '_WaitingRoom_createdAt_OrderByInput',
    '_WaitingRoom_updatedAt_OrderByInput',
    '_WaitingRoom_opensAt_OrderByInput',
    '_WaitingRoom_closesAt_OrderByInput',
    '_WaitingRoom_content_OrderByInput',
    '_WaitingRoom_title_OrderByInput',
    '_WaitingRoom_ownerId_OrderByInput',
]



# recursive WaitingRoom types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

WaitingRoomRelationFilter = TypedDict(
    'WaitingRoomRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class WaitingRoomListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class WaitingRoomInclude(TypedDict, total=False):
    """WaitingRoom relational arguments"""
    registrants: Union[bool, 'FindManyRegistrantArgsFromWaitingRoom']
    owner: Union[bool, 'UserArgsFromWaitingRoom']


    

class WaitingRoomIncludeFromWaitingRoom(TypedDict, total=False):
    """Relational arguments for WaitingRoom"""
    registrants: Union[bool, 'FindManyRegistrantArgsFromWaitingRoomRecursive1']
    owner: Union[bool, 'UserArgsFromWaitingRoomRecursive1']


class WaitingRoomIncludeFromWaitingRoomRecursive1(TypedDict, total=False):
    """Relational arguments for WaitingRoom"""
    registrants: Union[bool, 'FindManyRegistrantArgsFromWaitingRoomRecursive2']
    owner: Union[bool, 'UserArgsFromWaitingRoomRecursive2']


class WaitingRoomIncludeFromWaitingRoomRecursive2(TypedDict, total=False):
    """Relational arguments for WaitingRoom"""

    

class WaitingRoomArgsFromWaitingRoom(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive1'


class WaitingRoomArgsFromWaitingRoomRecursive1(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive2'


class WaitingRoomArgsFromWaitingRoomRecursive2(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    
    

class FindManyWaitingRoomArgsFromWaitingRoom(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    take: int
    skip: int
    order_by: Union['WaitingRoomOrderByInput', List['WaitingRoomOrderByInput']]
    where: 'WaitingRoomWhereInput'
    cursor: 'WaitingRoomWhereUniqueInput'
    distinct: List['WaitingRoomScalarFieldKeys']
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive1'


class FindManyWaitingRoomArgsFromWaitingRoomRecursive1(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    take: int
    skip: int
    order_by: Union['WaitingRoomOrderByInput', List['WaitingRoomOrderByInput']]
    where: 'WaitingRoomWhereInput'
    cursor: 'WaitingRoomWhereUniqueInput'
    distinct: List['WaitingRoomScalarFieldKeys']
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive2'


class FindManyWaitingRoomArgsFromWaitingRoomRecursive2(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    take: int
    skip: int
    order_by: Union['WaitingRoomOrderByInput', List['WaitingRoomOrderByInput']]
    where: 'WaitingRoomWhereInput'
    cursor: 'WaitingRoomWhereUniqueInput'
    distinct: List['WaitingRoomScalarFieldKeys']
    
    

class UserIncludeFromWaitingRoom(TypedDict, total=False):
    """Relational arguments for WaitingRoom"""
    waitingRooms: Union[bool, 'FindManyWaitingRoomArgsFromWaitingRoomRecursive1']


class UserIncludeFromWaitingRoomRecursive1(TypedDict, total=False):
    """Relational arguments for WaitingRoom"""
    waitingRooms: Union[bool, 'FindManyWaitingRoomArgsFromWaitingRoomRecursive2']


class UserIncludeFromWaitingRoomRecursive2(TypedDict, total=False):
    """Relational arguments for WaitingRoom"""

    

class UserArgsFromWaitingRoom(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromWaitingRoomRecursive1(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromWaitingRoomRecursive2(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    
    

class FindManyUserArgsFromWaitingRoom(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromWaitingRoomRecursive1(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromWaitingRoomRecursive2(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class RegistrantIncludeFromWaitingRoom(TypedDict, total=False):
    """Relational arguments for WaitingRoom"""
    waitingRoom: Union[bool, 'WaitingRoomArgsFromWaitingRoomRecursive1']


class RegistrantIncludeFromWaitingRoomRecursive1(TypedDict, total=False):
    """Relational arguments for WaitingRoom"""
    waitingRoom: Union[bool, 'WaitingRoomArgsFromWaitingRoomRecursive2']


class RegistrantIncludeFromWaitingRoomRecursive2(TypedDict, total=False):
    """Relational arguments for WaitingRoom"""

    

class RegistrantArgsFromWaitingRoom(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    include: 'RegistrantIncludeFromRegistrantRecursive1'


class RegistrantArgsFromWaitingRoomRecursive1(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    include: 'RegistrantIncludeFromRegistrantRecursive2'


class RegistrantArgsFromWaitingRoomRecursive2(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    
    

class FindManyRegistrantArgsFromWaitingRoom(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    take: int
    skip: int
    order_by: Union['RegistrantOrderByInput', List['RegistrantOrderByInput']]
    where: 'RegistrantWhereInput'
    cursor: 'RegistrantWhereUniqueInput'
    distinct: List['RegistrantScalarFieldKeys']
    include: 'RegistrantIncludeFromRegistrantRecursive1'


class FindManyRegistrantArgsFromWaitingRoomRecursive1(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    take: int
    skip: int
    order_by: Union['RegistrantOrderByInput', List['RegistrantOrderByInput']]
    where: 'RegistrantWhereInput'
    cursor: 'RegistrantWhereUniqueInput'
    distinct: List['RegistrantScalarFieldKeys']
    include: 'RegistrantIncludeFromRegistrantRecursive2'


class FindManyRegistrantArgsFromWaitingRoomRecursive2(TypedDict, total=False):
    """Arguments for WaitingRoom"""
    take: int
    skip: int
    order_by: Union['RegistrantOrderByInput', List['RegistrantOrderByInput']]
    where: 'RegistrantWhereInput'
    cursor: 'RegistrantWhereUniqueInput'
    distinct: List['RegistrantScalarFieldKeys']
    


FindManyWaitingRoomArgs = FindManyWaitingRoomArgsFromWaitingRoom
FindFirstWaitingRoomArgs = FindManyWaitingRoomArgsFromWaitingRoom


    

class WaitingRoomWhereInput(TypedDict, total=False):
    """WaitingRoom arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    opensAt: Union[datetime.datetime, 'types.DateTimeFilter']
    closesAt: Union[datetime.datetime, 'types.DateTimeFilter']
    content: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    registrants: 'RegistrantListRelationFilter'
    owner: 'UserRelationFilter'
    ownerId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['WaitingRoomWhereInputRecursive1', List['WaitingRoomWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['WaitingRoomWhereInputRecursive1']
    OR: List['WaitingRoomWhereInputRecursive1']
    NOT: List['WaitingRoomWhereInputRecursive1']


class WaitingRoomWhereInputRecursive1(TypedDict, total=False):
    """WaitingRoom arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    opensAt: Union[datetime.datetime, 'types.DateTimeFilter']
    closesAt: Union[datetime.datetime, 'types.DateTimeFilter']
    content: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    registrants: 'RegistrantListRelationFilter'
    owner: 'UserRelationFilter'
    ownerId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['WaitingRoomWhereInputRecursive2', List['WaitingRoomWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['WaitingRoomWhereInputRecursive2']
    OR: List['WaitingRoomWhereInputRecursive2']
    NOT: List['WaitingRoomWhereInputRecursive2']


class WaitingRoomWhereInputRecursive2(TypedDict, total=False):
    """WaitingRoom arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    opensAt: Union[datetime.datetime, 'types.DateTimeFilter']
    closesAt: Union[datetime.datetime, 'types.DateTimeFilter']
    content: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    registrants: 'RegistrantListRelationFilter'
    owner: 'UserRelationFilter'
    ownerId: Union[_str, 'types.StringFilter']



# aggregate WaitingRoom types


    

class WaitingRoomScalarWhereWithAggregatesInput(TypedDict, total=False):
    """WaitingRoom arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    opensAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    closesAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['WaitingRoomScalarWhereWithAggregatesInputRecursive1']
    OR: List['WaitingRoomScalarWhereWithAggregatesInputRecursive1']
    NOT: List['WaitingRoomScalarWhereWithAggregatesInputRecursive1']


class WaitingRoomScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """WaitingRoom arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    opensAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    closesAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['WaitingRoomScalarWhereWithAggregatesInputRecursive2']
    OR: List['WaitingRoomScalarWhereWithAggregatesInputRecursive2']
    NOT: List['WaitingRoomScalarWhereWithAggregatesInputRecursive2']


class WaitingRoomScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """WaitingRoom arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    opensAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    closesAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    ownerId: Union[_str, 'types.StringWithAggregatesFilter']



class WaitingRoomGroupByOutput(TypedDict, total=False):
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    opensAt: datetime.datetime
    closesAt: datetime.datetime
    content: _str
    title: _str
    ownerId: _str
    _sum: 'WaitingRoomSumAggregateOutput'
    _avg: 'WaitingRoomAvgAggregateOutput'
    _min: 'WaitingRoomMinAggregateOutput'
    _max: 'WaitingRoomMaxAggregateOutput'
    _count: 'WaitingRoomCountAggregateOutput'


class WaitingRoomAvgAggregateOutput(TypedDict, total=False):
    """WaitingRoom output for aggregating averages"""


class WaitingRoomSumAggregateOutput(TypedDict, total=False):
    """WaitingRoom output for aggregating sums"""


class WaitingRoomScalarAggregateOutput(TypedDict, total=False):
    """WaitingRoom output including scalar fields"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    opensAt: datetime.datetime
    closesAt: datetime.datetime
    content: _str
    title: _str
    ownerId: _str


WaitingRoomMinAggregateOutput = WaitingRoomScalarAggregateOutput
WaitingRoomMaxAggregateOutput = WaitingRoomScalarAggregateOutput


class WaitingRoomMaxAggregateInput(TypedDict, total=False):
    """WaitingRoom input for aggregating by max"""
    id: bool
    createdAt: bool
    updatedAt: bool
    opensAt: bool
    closesAt: bool
    content: bool
    title: bool
    ownerId: bool


class WaitingRoomMinAggregateInput(TypedDict, total=False):
    """WaitingRoom input for aggregating by min"""
    id: bool
    createdAt: bool
    updatedAt: bool
    opensAt: bool
    closesAt: bool
    content: bool
    title: bool
    ownerId: bool


class WaitingRoomNumberAggregateInput(TypedDict, total=False):
    """WaitingRoom input for aggregating numbers"""


WaitingRoomAvgAggregateInput = WaitingRoomNumberAggregateInput
WaitingRoomSumAggregateInput = WaitingRoomNumberAggregateInput


WaitingRoomCountAggregateInput = TypedDict(
    'WaitingRoomCountAggregateInput',
    {
        'id': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'opensAt': bool,
        'closesAt': bool,
        'content': bool,
        'title': bool,
        'ownerId': bool,
        '_all': bool,
    },
    total=False,
)

WaitingRoomCountAggregateOutput = TypedDict(
    'WaitingRoomCountAggregateOutput',
    {
        'id': int,
        'createdAt': int,
        'updatedAt': int,
        'opensAt': int,
        'closesAt': int,
        'content': int,
        'title': int,
        'ownerId': int,
        '_all': int,
    },
    total=False,
)


WaitingRoomKeys = Literal[
    'id',
    'createdAt',
    'updatedAt',
    'opensAt',
    'closesAt',
    'content',
    'title',
    'registrants',
    'owner',
    'ownerId',
]
WaitingRoomScalarFieldKeys = Literal[
    'id',
    'createdAt',
    'updatedAt',
    'opensAt',
    'closesAt',
    'content',
    'title',
    'ownerId',
]
WaitingRoomScalarFieldKeysT = TypeVar('WaitingRoomScalarFieldKeysT', bound=WaitingRoomScalarFieldKeys)

WaitingRoomRelationalFieldKeys = Literal[
        'registrants',
        'owner',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    waitingRooms: 'WaitingRoomCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    firebaseUid: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    firebaseUid: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_firebaseUid_Input = TypedDict(
    '_UserWhereUnique_firebaseUid_Input',
    {
        'firebaseUid': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_firebaseUid_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    firebaseUid: _str
    waitingRooms: 'WaitingRoomUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    firebaseUid: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_firebaseUid_OrderByInput = TypedDict(
    '_User_firebaseUid_OrderByInput',
    {
        'firebaseUid': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_firebaseUid_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    waitingRooms: Union[bool, 'FindManyWaitingRoomArgsFromUser']


    

class WaitingRoomIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    registrants: Union[bool, 'FindManyRegistrantArgsFromUserRecursive1']
    owner: Union[bool, 'UserArgsFromUserRecursive1']


class WaitingRoomIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    registrants: Union[bool, 'FindManyRegistrantArgsFromUserRecursive2']
    owner: Union[bool, 'UserArgsFromUserRecursive2']


class WaitingRoomIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class WaitingRoomArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive1'


class WaitingRoomArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive2'


class WaitingRoomArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyWaitingRoomArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WaitingRoomOrderByInput', List['WaitingRoomOrderByInput']]
    where: 'WaitingRoomWhereInput'
    cursor: 'WaitingRoomWhereUniqueInput'
    distinct: List['WaitingRoomScalarFieldKeys']
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive1'


class FindManyWaitingRoomArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WaitingRoomOrderByInput', List['WaitingRoomOrderByInput']]
    where: 'WaitingRoomWhereInput'
    cursor: 'WaitingRoomWhereUniqueInput'
    distinct: List['WaitingRoomScalarFieldKeys']
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive2'


class FindManyWaitingRoomArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['WaitingRoomOrderByInput', List['WaitingRoomOrderByInput']]
    where: 'WaitingRoomWhereInput'
    cursor: 'WaitingRoomWhereUniqueInput'
    distinct: List['WaitingRoomScalarFieldKeys']
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    waitingRooms: Union[bool, 'FindManyWaitingRoomArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    waitingRooms: Union[bool, 'FindManyWaitingRoomArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class RegistrantIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    waitingRoom: Union[bool, 'WaitingRoomArgsFromUserRecursive1']


class RegistrantIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    waitingRoom: Union[bool, 'WaitingRoomArgsFromUserRecursive2']


class RegistrantIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""

    

class RegistrantArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'RegistrantIncludeFromRegistrantRecursive1'


class RegistrantArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'RegistrantIncludeFromRegistrantRecursive2'


class RegistrantArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyRegistrantArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RegistrantOrderByInput', List['RegistrantOrderByInput']]
    where: 'RegistrantWhereInput'
    cursor: 'RegistrantWhereUniqueInput'
    distinct: List['RegistrantScalarFieldKeys']
    include: 'RegistrantIncludeFromRegistrantRecursive1'


class FindManyRegistrantArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RegistrantOrderByInput', List['RegistrantOrderByInput']]
    where: 'RegistrantWhereInput'
    cursor: 'RegistrantWhereUniqueInput'
    distinct: List['RegistrantScalarFieldKeys']
    include: 'RegistrantIncludeFromRegistrantRecursive2'


class FindManyRegistrantArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RegistrantOrderByInput', List['RegistrantOrderByInput']]
    where: 'RegistrantWhereInput'
    cursor: 'RegistrantWhereUniqueInput'
    distinct: List['RegistrantScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    firebaseUid: Union[_str, 'types.StringFilter']
    waitingRooms: 'WaitingRoomListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    firebaseUid: Union[_str, 'types.StringFilter']
    waitingRooms: 'WaitingRoomListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    firebaseUid: Union[_str, 'types.StringFilter']
    waitingRooms: 'WaitingRoomListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    firebaseUid: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    firebaseUid: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    firebaseUid: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    firebaseUid: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    firebaseUid: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    createdAt: bool
    updatedAt: bool
    firebaseUid: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    createdAt: bool
    updatedAt: bool
    firebaseUid: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'firebaseUid': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'createdAt': int,
        'updatedAt': int,
        'firebaseUid': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'createdAt',
    'updatedAt',
    'firebaseUid',
    'waitingRooms',
]
UserScalarFieldKeys = Literal[
    'id',
    'createdAt',
    'updatedAt',
    'firebaseUid',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'waitingRooms',
    ]

# Registrant types

class RegistrantOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Registrant create method"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    waitingRoom: 'WaitingRoomCreateNestedWithoutRelationsInput'
    waitingRoomId: _str


class RegistrantCreateInput(RegistrantOptionalCreateInput):
    """Required arguments to the Registrant create method"""
    legalName: _str
    email: _str
    idNumber: _str
    idType: 'enums.IdType'
    phoneNumber: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RegistrantOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Registrant create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    waitingRoomId: _str


class RegistrantCreateWithoutRelationsInput(RegistrantOptionalCreateWithoutRelationsInput):
    """Required arguments to the Registrant create method, without relations"""
    legalName: _str
    email: _str
    idNumber: _str
    idType: 'enums.IdType'
    phoneNumber: _str


class RegistrantCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RegistrantCreateWithoutRelationsInput'
    connect: 'RegistrantWhereUniqueInput'


class RegistrantCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RegistrantCreateWithoutRelationsInput', List['RegistrantCreateWithoutRelationsInput']]
    connect: Union['RegistrantWhereUniqueInput', List['RegistrantWhereUniqueInput']]


_RegistrantWhereUnique_id_Input = TypedDict(
    '_RegistrantWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

RegistrantWhereUniqueInput = _RegistrantWhereUnique_id_Input


class RegistrantUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    legalName: _str
    email: _str
    idNumber: _str
    idType: 'enums.IdType'
    phoneNumber: _str
    waitingRoom: 'WaitingRoomUpdateOneWithoutRelationsInput'


class RegistrantUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    legalName: _str
    email: _str
    idNumber: _str
    idType: 'enums.IdType'
    phoneNumber: _str


class RegistrantUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RegistrantCreateWithoutRelationsInput']
    connect: List['RegistrantWhereUniqueInput']
    set: List['RegistrantWhereUniqueInput']
    disconnect: List['RegistrantWhereUniqueInput']
    delete: List['RegistrantWhereUniqueInput']

    # TODO
    # update: List['RegistrantUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RegistrantUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RegistrantScalarWhereInput']
    # upsert: List['RegistrantUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['RegistrantCreateOrConnectWithoutRelationsInput']


class RegistrantUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RegistrantCreateWithoutRelationsInput'
    connect: 'RegistrantWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RegistrantUpdateInput'
    # upsert: 'RegistrantUpsertWithoutRelationsInput'
    # connectOrCreate: 'RegistrantCreateOrConnectWithoutRelationsInput'


class RegistrantUpsertInput(TypedDict):
    create: 'RegistrantCreateInput'
    update: 'RegistrantUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Registrant_id_OrderByInput = TypedDict(
    '_Registrant_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Registrant_createdAt_OrderByInput = TypedDict(
    '_Registrant_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Registrant_updatedAt_OrderByInput = TypedDict(
    '_Registrant_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Registrant_legalName_OrderByInput = TypedDict(
    '_Registrant_legalName_OrderByInput',
    {
        'legalName': 'SortOrder',
    },
    total=True
)

_Registrant_email_OrderByInput = TypedDict(
    '_Registrant_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Registrant_idNumber_OrderByInput = TypedDict(
    '_Registrant_idNumber_OrderByInput',
    {
        'idNumber': 'SortOrder',
    },
    total=True
)

_Registrant_idType_OrderByInput = TypedDict(
    '_Registrant_idType_OrderByInput',
    {
        'idType': 'SortOrder',
    },
    total=True
)

_Registrant_phoneNumber_OrderByInput = TypedDict(
    '_Registrant_phoneNumber_OrderByInput',
    {
        'phoneNumber': 'SortOrder',
    },
    total=True
)

_Registrant_waitingRoomId_OrderByInput = TypedDict(
    '_Registrant_waitingRoomId_OrderByInput',
    {
        'waitingRoomId': 'SortOrder',
    },
    total=True
)

RegistrantOrderByInput = Union[
    '_Registrant_id_OrderByInput',
    '_Registrant_createdAt_OrderByInput',
    '_Registrant_updatedAt_OrderByInput',
    '_Registrant_legalName_OrderByInput',
    '_Registrant_email_OrderByInput',
    '_Registrant_idNumber_OrderByInput',
    '_Registrant_idType_OrderByInput',
    '_Registrant_phoneNumber_OrderByInput',
    '_Registrant_waitingRoomId_OrderByInput',
]



# recursive Registrant types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RegistrantRelationFilter = TypedDict(
    'RegistrantRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RegistrantListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RegistrantInclude(TypedDict, total=False):
    """Registrant relational arguments"""
    waitingRoom: Union[bool, 'WaitingRoomArgsFromRegistrant']


    

class WaitingRoomIncludeFromRegistrant(TypedDict, total=False):
    """Relational arguments for Registrant"""
    registrants: Union[bool, 'FindManyRegistrantArgsFromRegistrantRecursive1']
    owner: Union[bool, 'UserArgsFromRegistrantRecursive1']


class WaitingRoomIncludeFromRegistrantRecursive1(TypedDict, total=False):
    """Relational arguments for Registrant"""
    registrants: Union[bool, 'FindManyRegistrantArgsFromRegistrantRecursive2']
    owner: Union[bool, 'UserArgsFromRegistrantRecursive2']


class WaitingRoomIncludeFromRegistrantRecursive2(TypedDict, total=False):
    """Relational arguments for Registrant"""

    

class WaitingRoomArgsFromRegistrant(TypedDict, total=False):
    """Arguments for Registrant"""
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive1'


class WaitingRoomArgsFromRegistrantRecursive1(TypedDict, total=False):
    """Arguments for Registrant"""
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive2'


class WaitingRoomArgsFromRegistrantRecursive2(TypedDict, total=False):
    """Arguments for Registrant"""
    
    

class FindManyWaitingRoomArgsFromRegistrant(TypedDict, total=False):
    """Arguments for Registrant"""
    take: int
    skip: int
    order_by: Union['WaitingRoomOrderByInput', List['WaitingRoomOrderByInput']]
    where: 'WaitingRoomWhereInput'
    cursor: 'WaitingRoomWhereUniqueInput'
    distinct: List['WaitingRoomScalarFieldKeys']
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive1'


class FindManyWaitingRoomArgsFromRegistrantRecursive1(TypedDict, total=False):
    """Arguments for Registrant"""
    take: int
    skip: int
    order_by: Union['WaitingRoomOrderByInput', List['WaitingRoomOrderByInput']]
    where: 'WaitingRoomWhereInput'
    cursor: 'WaitingRoomWhereUniqueInput'
    distinct: List['WaitingRoomScalarFieldKeys']
    include: 'WaitingRoomIncludeFromWaitingRoomRecursive2'


class FindManyWaitingRoomArgsFromRegistrantRecursive2(TypedDict, total=False):
    """Arguments for Registrant"""
    take: int
    skip: int
    order_by: Union['WaitingRoomOrderByInput', List['WaitingRoomOrderByInput']]
    where: 'WaitingRoomWhereInput'
    cursor: 'WaitingRoomWhereUniqueInput'
    distinct: List['WaitingRoomScalarFieldKeys']
    
    

class UserIncludeFromRegistrant(TypedDict, total=False):
    """Relational arguments for Registrant"""
    waitingRooms: Union[bool, 'FindManyWaitingRoomArgsFromRegistrantRecursive1']


class UserIncludeFromRegistrantRecursive1(TypedDict, total=False):
    """Relational arguments for Registrant"""
    waitingRooms: Union[bool, 'FindManyWaitingRoomArgsFromRegistrantRecursive2']


class UserIncludeFromRegistrantRecursive2(TypedDict, total=False):
    """Relational arguments for Registrant"""

    

class UserArgsFromRegistrant(TypedDict, total=False):
    """Arguments for Registrant"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromRegistrantRecursive1(TypedDict, total=False):
    """Arguments for Registrant"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromRegistrantRecursive2(TypedDict, total=False):
    """Arguments for Registrant"""
    
    

class FindManyUserArgsFromRegistrant(TypedDict, total=False):
    """Arguments for Registrant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromRegistrantRecursive1(TypedDict, total=False):
    """Arguments for Registrant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromRegistrantRecursive2(TypedDict, total=False):
    """Arguments for Registrant"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class RegistrantIncludeFromRegistrant(TypedDict, total=False):
    """Relational arguments for Registrant"""
    waitingRoom: Union[bool, 'WaitingRoomArgsFromRegistrantRecursive1']


class RegistrantIncludeFromRegistrantRecursive1(TypedDict, total=False):
    """Relational arguments for Registrant"""
    waitingRoom: Union[bool, 'WaitingRoomArgsFromRegistrantRecursive2']


class RegistrantIncludeFromRegistrantRecursive2(TypedDict, total=False):
    """Relational arguments for Registrant"""

    

class RegistrantArgsFromRegistrant(TypedDict, total=False):
    """Arguments for Registrant"""
    include: 'RegistrantIncludeFromRegistrantRecursive1'


class RegistrantArgsFromRegistrantRecursive1(TypedDict, total=False):
    """Arguments for Registrant"""
    include: 'RegistrantIncludeFromRegistrantRecursive2'


class RegistrantArgsFromRegistrantRecursive2(TypedDict, total=False):
    """Arguments for Registrant"""
    
    

class FindManyRegistrantArgsFromRegistrant(TypedDict, total=False):
    """Arguments for Registrant"""
    take: int
    skip: int
    order_by: Union['RegistrantOrderByInput', List['RegistrantOrderByInput']]
    where: 'RegistrantWhereInput'
    cursor: 'RegistrantWhereUniqueInput'
    distinct: List['RegistrantScalarFieldKeys']
    include: 'RegistrantIncludeFromRegistrantRecursive1'


class FindManyRegistrantArgsFromRegistrantRecursive1(TypedDict, total=False):
    """Arguments for Registrant"""
    take: int
    skip: int
    order_by: Union['RegistrantOrderByInput', List['RegistrantOrderByInput']]
    where: 'RegistrantWhereInput'
    cursor: 'RegistrantWhereUniqueInput'
    distinct: List['RegistrantScalarFieldKeys']
    include: 'RegistrantIncludeFromRegistrantRecursive2'


class FindManyRegistrantArgsFromRegistrantRecursive2(TypedDict, total=False):
    """Arguments for Registrant"""
    take: int
    skip: int
    order_by: Union['RegistrantOrderByInput', List['RegistrantOrderByInput']]
    where: 'RegistrantWhereInput'
    cursor: 'RegistrantWhereUniqueInput'
    distinct: List['RegistrantScalarFieldKeys']
    


FindManyRegistrantArgs = FindManyRegistrantArgsFromRegistrant
FindFirstRegistrantArgs = FindManyRegistrantArgsFromRegistrant


    

class RegistrantWhereInput(TypedDict, total=False):
    """Registrant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    legalName: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    idNumber: Union[_str, 'types.StringFilter']
    idType: 'enums.IdType'
    phoneNumber: Union[_str, 'types.StringFilter']
    waitingRoom: 'WaitingRoomRelationFilter'
    waitingRoomId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['RegistrantWhereInputRecursive1', List['RegistrantWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RegistrantWhereInputRecursive1']
    OR: List['RegistrantWhereInputRecursive1']
    NOT: List['RegistrantWhereInputRecursive1']


class RegistrantWhereInputRecursive1(TypedDict, total=False):
    """Registrant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    legalName: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    idNumber: Union[_str, 'types.StringFilter']
    idType: 'enums.IdType'
    phoneNumber: Union[_str, 'types.StringFilter']
    waitingRoom: 'WaitingRoomRelationFilter'
    waitingRoomId: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['RegistrantWhereInputRecursive2', List['RegistrantWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RegistrantWhereInputRecursive2']
    OR: List['RegistrantWhereInputRecursive2']
    NOT: List['RegistrantWhereInputRecursive2']


class RegistrantWhereInputRecursive2(TypedDict, total=False):
    """Registrant arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    legalName: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    idNumber: Union[_str, 'types.StringFilter']
    idType: 'enums.IdType'
    phoneNumber: Union[_str, 'types.StringFilter']
    waitingRoom: 'WaitingRoomRelationFilter'
    waitingRoomId: Union[_str, 'types.StringFilter']



# aggregate Registrant types


    

class RegistrantScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Registrant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    legalName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    idNumber: Union[_str, 'types.StringWithAggregatesFilter']
    idType: 'enums.IdType'
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']
    waitingRoomId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RegistrantScalarWhereWithAggregatesInputRecursive1']
    OR: List['RegistrantScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RegistrantScalarWhereWithAggregatesInputRecursive1']


class RegistrantScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Registrant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    legalName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    idNumber: Union[_str, 'types.StringWithAggregatesFilter']
    idType: 'enums.IdType'
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']
    waitingRoomId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RegistrantScalarWhereWithAggregatesInputRecursive2']
    OR: List['RegistrantScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RegistrantScalarWhereWithAggregatesInputRecursive2']


class RegistrantScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Registrant arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    legalName: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    idNumber: Union[_str, 'types.StringWithAggregatesFilter']
    idType: 'enums.IdType'
    phoneNumber: Union[_str, 'types.StringWithAggregatesFilter']
    waitingRoomId: Union[_str, 'types.StringWithAggregatesFilter']



class RegistrantGroupByOutput(TypedDict, total=False):
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    legalName: _str
    email: _str
    idNumber: _str
    idType: 'enums.IdType'
    phoneNumber: _str
    waitingRoomId: _str
    _sum: 'RegistrantSumAggregateOutput'
    _avg: 'RegistrantAvgAggregateOutput'
    _min: 'RegistrantMinAggregateOutput'
    _max: 'RegistrantMaxAggregateOutput'
    _count: 'RegistrantCountAggregateOutput'


class RegistrantAvgAggregateOutput(TypedDict, total=False):
    """Registrant output for aggregating averages"""


class RegistrantSumAggregateOutput(TypedDict, total=False):
    """Registrant output for aggregating sums"""


class RegistrantScalarAggregateOutput(TypedDict, total=False):
    """Registrant output including scalar fields"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    legalName: _str
    email: _str
    idNumber: _str
    idType: 'enums.IdType'
    phoneNumber: _str
    waitingRoomId: _str


RegistrantMinAggregateOutput = RegistrantScalarAggregateOutput
RegistrantMaxAggregateOutput = RegistrantScalarAggregateOutput


class RegistrantMaxAggregateInput(TypedDict, total=False):
    """Registrant input for aggregating by max"""
    id: bool
    createdAt: bool
    updatedAt: bool
    legalName: bool
    email: bool
    idNumber: bool
    idType: bool
    phoneNumber: bool
    waitingRoomId: bool


class RegistrantMinAggregateInput(TypedDict, total=False):
    """Registrant input for aggregating by min"""
    id: bool
    createdAt: bool
    updatedAt: bool
    legalName: bool
    email: bool
    idNumber: bool
    idType: bool
    phoneNumber: bool
    waitingRoomId: bool


class RegistrantNumberAggregateInput(TypedDict, total=False):
    """Registrant input for aggregating numbers"""


RegistrantAvgAggregateInput = RegistrantNumberAggregateInput
RegistrantSumAggregateInput = RegistrantNumberAggregateInput


RegistrantCountAggregateInput = TypedDict(
    'RegistrantCountAggregateInput',
    {
        'id': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'legalName': bool,
        'email': bool,
        'idNumber': bool,
        'idType': bool,
        'phoneNumber': bool,
        'waitingRoomId': bool,
        '_all': bool,
    },
    total=False,
)

RegistrantCountAggregateOutput = TypedDict(
    'RegistrantCountAggregateOutput',
    {
        'id': int,
        'createdAt': int,
        'updatedAt': int,
        'legalName': int,
        'email': int,
        'idNumber': int,
        'idType': int,
        'phoneNumber': int,
        'waitingRoomId': int,
        '_all': int,
    },
    total=False,
)


RegistrantKeys = Literal[
    'id',
    'createdAt',
    'updatedAt',
    'legalName',
    'email',
    'idNumber',
    'idType',
    'phoneNumber',
    'waitingRoom',
    'waitingRoomId',
]
RegistrantScalarFieldKeys = Literal[
    'id',
    'createdAt',
    'updatedAt',
    'legalName',
    'email',
    'idNumber',
    'idType',
    'phoneNumber',
    'waitingRoomId',
]
RegistrantScalarFieldKeysT = TypeVar('RegistrantScalarFieldKeysT', bound=RegistrantScalarFieldKeys)

RegistrantRelationalFieldKeys = Literal[
        'waitingRoom',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields